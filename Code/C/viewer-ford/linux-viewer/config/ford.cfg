
# This block should only store calibration data.  (i.e. matt antone owns this
# block)

calibration {

# Bounds are specified in body coordinates (center of rear axle=origin)

# **NOTE: these bounds are tight, and were derived from the original CAD
#  model, so do NOT accommodate the extra equipment on the front and rear.

    vehicle_bounds {
        front_left = [5.086,1.0];
        front_right = [5.086,-1.0];
        rear_left = [-1.266,1.0];
        rear_right = [-1.266,-1.0];
    }

    calibration_to_body {
        position = [0,0,0];
        orientation = [1,0,0,0];
    }
#    sensor_to_body {
#        position = [1.86,0,1.7];
#        orientation = [1,0,0,0];
#    }
    
    imu {
        serial_number = 1;
        body_frame {
            rpy = [0, 0, 0];
            position = [0, 0, .40];
        }
    }
    
    gps {
        body_frame {
            position = [0, 0, 0];  # Matt
            # position = [-.8, 0, 0.9];        
                   }
      	#nad83_offset = [ 0, 0, 0];
	# Weymouth
	# nad83_offset = [ 12.1944e-6, 2.6528e-6, -1.2280];
	# Victorville from cors station:
	#nad83_offset = [ 4.46e-6, -1.15e-5, -0.729];
	# ElToro (John Wayne) cors station:
	# nad83_offset = [ 3.58e-6, -1.08e-5, -0.723];
	nad83_offset = [0, 0, 0];  # Matt  Note: No offset for WGS84
        # ElToro (John Wayne) cors station with sign error works best with Caltech RNDF :|
	#nad83_offset = [ -3.58e-6, -1.08e-5, -0.723];
    } # Matt

    
    BROOM_LEFT {
        position = [2.617, 0.451, 2.2];
	#rpy = [ 180, 6.5, -0.5];
	rpy = [ 180, 12, 1.5];
        relative_to = "body";
    }

    BROOM_RIGHT {
        position = [2.645, -0.426, 2.2];
	#rpy = [ 0, 5.0, -1.75 ];
	rpy = [ 0, 6.0, 0.5 ];
        relative_to = "body";
    }


    VELODYNE {
        position = [2.57, 0.01, 2.57];
        #angleaxis = [0, 1, 0, 0];
        rpy = [0, 0, 2];
        relative_to = "body";
    }

# NOTE (2007-10-14): physical measurements of camera positions are really
# about 15cm off in x.
# So the fc camera labeled as 1.6m in x is physically more like 1.75m.
# The 15cm is a fudge factor used to align the data better with the lasers.
    cameras {
        cam_roof_fl {
            width = 752;
            height = 480;
            distortion_model = "spherical";
            distortion_center = [0.0238420074587097,-0.00247847003620082];
            distortion_params = [1.06170777778865];
            pinhole = [483.752956,483.752956,0.000000,394.026759,239.435733];
            position = [2.35, 0.114, 2.2];
            rpy = [ -103.294, 4.66, -68.7 ];
#            rpy = [-105, 0, -78];  #[-78, 0, -70];
#            orientation = [0.53472608208262329, -0.67505760764805789, 0.411768563359388, -0.29801324421239056];
            relative_to = "body";
        }

        cam_roof_fr {
            width = 752;
            height = 480;
            distortion_model = "spherical";
            distortion_center = [ -0.0220483407076863,-0.0218721440445196];
            distortion_params = [1.07432056380436];
            pinhole = [474.883384,474.883384,0,358.63445,223.511294];
            position = [2.35, -0.114, 2.2];
            rpy = [ -106.401, -3.913, -106.221 ];
#            orientation = [0.5213338044735969, -0.4777144171082609, 0.59636781052901811, -0.3799281965909152];
            relative_to = "body";
        }
        cam_roof_rc {
            width = 752;
            height = 480;
            distortion_model = "spherical";
            distortion_center = [0.0352100672754937,0.00533840835547762];
            distortion_params = [1.0749084977384];
            pinhole = [482.150565,482.150565,0,402.827409,244.718207];
            position = [0.944, 0.0, 2.2];
#            rpy = [-96.5, 0, 89.2];
            orientation = [-0.4628286932,0.5224897246,0.5295101758,-0.4820923794];
            relative_to = "body";
        }
    }
    
    RADAR_SRR1 {
        position = [5.055, 0.009, 0.175];
        rpy = [0, 0, 0];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR2 {
        position = [5.036, 0.009, 0.413];
        rpy = [0, 0, 0];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR3 {
        position = [5.020, 0.250, 0.413];
        rpy = [0, 0, 16];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR4 {
        position = [5.079, -0.220, 0.413];
        rpy = [0, 0, -16];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_SRR5 {
        position = [4.723, 2.708, 0.446];   #[4.723, 1.108, 0.446];
        rpy = [0, 0, 78.6];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_SRR6 {
        position = [4.593, -2.685, 0.444];  #[4.693, -1.085, 0.444];
        rpy = [0, 0, -78.6];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR7 {
        position = [4.542, 1.096, 0.865];
        rpy = [0, 0, 80];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR8 {
        position = [4.525, -1.066, 0.860];
        rpy = [0, 0, -78.6];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR9 {
        position = [3.389, 1.151, 0.693];
        rpy = [0, 0, 177];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR10 {
        position = [3.376, -1.143, 0.699];
        rpy = [0, 0, -177];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_LRR11 {
        position = [-1.273, 0.025, 0.458];
        rpy = [0, 0, -180];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
    RADAR_SRR12 {
        position = [-1.292, 0.025, 0.363];
        rpy = [0, 0, -180];
        # relative_to = "calibration_to_body";  # Matt
        relative_to = "body";
    }
}


renderer_car {
     chassis_model = "Ford_F250_2005.rwx";
     chassis_translate = [0, 0.405, 0];
     chassis_xyz_rotate = [90, 0, 0];
     chassis_scale = 1;
}


obstacles {
    velodyne_mask_length = 6.5;
    velodyne_mask_width = 2.6;
    velodyne_mask_length_offset = -1;
    velodyne_mask_width_offset = 0;
    velodyne_mask_rotation = 0; #1.571;

    global_mask_forward = 5.0;
    global_mask_backward = 1.5;
    global_mask_width = 2.6;

    persist_mask_forward  = 6.00; #[m] fwd of rear axel
    persist_mask_backward = 4.50; #[m] bwd of rear axel
    persist_mask_width    = 5.00; #[m] total width centered at middle of rear axel
    persist_mask_expire_sec = 5; #[s] time to persist objects within mask if unseen
}


# this block stores all lidar configuration params except for calibration

# If a sensor is listed as disabled = "true" (case-insensitive) or disabled = 1
# (or any number other than 0), it wont be searched for by the carcheck script.
# disabled = 0 is valid, but ignored: sensors are enabled by default.

RADAR_TRACKS {
	     viewer_color = [1,0,0];
}

LASER_TRACKS {
	     viewer_color = [0,0,1];
}

BROOM_LEFT {
    device="192.168.3.41";
    viewer_color = [ 0.0, 1, 0 ];
    # mask off occluded parts of the sensor field. This is a list
    # of pairs of doubles: any theta (in the sicks coordinates)
    # is eliminated if it is between the two as you rotated in
    # +theta direction from the first to the second.
    #verifiers=["SKIRT_FL","SKIRT_FR"];
    #mask = [1.5, 1.6];
}

BROOM_RIGHT {
    device="192.168.3.42";
    viewer_color = [ 0.0, 1, 1 ];
}

RADAR_SRR1 {
    device="ethcan10:1";
}

RADAR_LRR2 {
    device="ethcan10:0";
}

RADAR_LRR3 {    
    device="ethcan11:1";
}

RADAR_LRR4 {
    device="ethcan11:0";
}

RADAR_SRR5 {
    device="ethcan12:1";
}

RADAR_SRR6 {
    device="ethcan12:0";
}

RADAR_LRR7 {
    device="ethcan13:1";
}

RADAR_LRR8 {
    device="ethcan13:0";
}

RADAR_LRR9 {
    device="ethcan14:1";
}

RADAR_LRR10 {
    device="ethcan14:0";
}

RADAR_LRR11 {
    device="ethcan15:1";
}

RADAR_SRR12 {
    device="ethcan15:0";
}


# this block stores all camera configuration params except for calibration
cameras {
    #Roof front left
    cam_roof_fl {
        uid = "0xb09d01006d68d7";
        thumbnail_channel = "CAM_THUMB_RFL";
        image_url_channel = "CAM_URL_RFL";
        full_frame_channel = "CAM_FRAME_RFL";
        short_name = "RFL";
        vehicle_body = [ 0,455,
			228,455,
			390,330,
			745,335,
			751,345,
                        751,479,
                        0,  479];
    }

    #Roof front right
    cam_roof_fr {
        uid = "0xb09d01006d68c6";
        thumbnail_channel = "CAM_THUMB_RFR";
        image_url_channel = "CAM_URL_RFR";
        full_frame_channel = "CAM_FRAME_RFR";
        short_name = "RFR";
        vehicle_body = [ 0, 316,
                     51,297,
                     316,288,
                     426,320,
		     570,448,
                     751,444,
                     751, 479,
                     0, 479 ];
    }

    #Roof rear center
    cam_roof_rc {
        uid = "0xb09d01006d68c0";
        thumbnail_channel = "CAM_THUMB_RRC";
        image_url_channel = "CAM_URL_RRC";
        full_frame_channel = "CAM_FRAME_RRC";
        short_name = "RRC";
        vehicle_body = [ 99,479,
			 215,362,
			 605,357,
			 736,479 ];
    }


}


#mobileye {
#    refPointX = 0;
#    refPointY = 0;
#    refPointZ = 0;
#    minLaneWidth = 2.5;
#    leftLDWsens = 1;
#    rightLDWsens = 1;
#    runningMode = 0;
#}

# this block stores all controller related params
control {
    sc {
        Kp_fw   = 0.2;          # [/(m/s)] P gain for forwards drive (FD)
        Ki_fw   = 0.04;         # [/m] I gain for FD
        Kd_fw   = 0.0;          # [/(m/(s^2))] D gain for FD
        Kwu_fw  = 0.5;          # 0.2;          # 0.1;          # [m] anti-windup gain for FD
        Kp_rv   = 0.2;          # [/(m/s)] P gain for reverse drive (RD)
        Ki_rv   = 0.04;         # [/m] I gain for RD
        Kd_rv   = 0.0;          # [/(m/(s^2))] D gain for RD
        Kwu_rv  = 0.5;         # 0.2;          # 0.1;          # [m] anti-windup gain for RD

        use_acc_ff  = 0;        # [.] use acceleration feedforward
        use_dec_ff  = 0;        # [.] use deceleration feedforward
        use_vel_ff  = 0;        # [.] use speed feedforward
        acc_ff_n    = 2;            # [.] numer of points
        acc_ff_key  = [0.0, 2.0];   # [m/(s^2)] commanded acceleration
        acc_ff_val  = [0.0, 0.02];  # [.] u_speed
        dec_ff_n    = 2;            # [.] numer of points
        dec_ff_key  = [-2.0, 0.0];  # [m/(s^2)] commanded deceleration
        dec_ff_val  = [-0.1, 0.0]; # [.] u_speed
        vel_ff_n    = 9;            # [.] number of points
        vel_ff_key  = [ 0.0,    1.5,    2.0,    2.6,    3.3,    7.2,    9.4, 
                          13.5,  100.0];
        # [m/s] commanded speed
        vel_ff_val  = [ 0.0, 0.0500, 0.0817, 0.1133, 0.1292, 0.1450, 0.1900, 
                        0.2000, 0.2000];
        # [.] u_speed
    }
    pp {
        fw_ref_dist = 1.99; 	# 1.4425;   # [m] distance of reference point from rear 
                                # axle, positive towards nose, for forward 
                                # drive (FD)
        fw_min_L1   = 5.0;      # 6.0;      # 4.0;      # 5.0;      # [m] minimum L1 distance for FD
        fw_max_L1   = 12.0;     # [m] maximum L1 distance for FD
        fw_min_L1_v = 1.34;     # [m/s] speed corresponding to fw_min_L1
        fw_max_L1_v = 5.36;     # [m/s] speed corresponding to fw_max_L1

        rv_ref_dist = -1.99;    # 0.0;      # 1.99;     # -1.99;    #-1.4425;  # [m] distance of reference point from rear
                                # axle, positive towards nose, for reverse 
                                # drive (RD)
        rv_min_L1   = 3.0;      # 1.0;      # 5.0;      # 1.0;      # 3.0;      # [m] minimum L1 distance for R
        rv_max_L1   = 12.0;     # [m] maximum L1 distance for RD
        rv_min_L1_v = 1.34;     # [m/s] speed corresponding to rv_min_L1
        rv_max_L1_v = 5.36;     # [m/s] speed corresponding to rv_max_L1
    }
    controller {
        stopped_gas_brake_mv    = 1400;     # [mV] gas to apply when stopped
        vel_stop_threshold      = 0.05;     # [m/s] velocity below which the 
                                            # car can be considered stopped
        acc_stop_threshold      = 0.1;      # [m/s^2] acceleration below which 
                                            # the car can be considered stopped
        stopped_hysteresis_factor   = 3.0;  # [.] this is the factor, 
                                            # multiplied to the nominal 
                                            # parameters, to determine whether 
                                            # the car is considered stopped, 
                                            # after it had actually stopped.

    ###########################################################################
    # PLEASE INCREASE THE THRESHOLD BELOW BEFORE THE RACE                     #
    #    max_safe_roll, max_safe_pitch, pose_update_max_delay_us,             #
    #    motion_plan_timeout                                                  #
    #       20[deg] = 0.349[rad].   30[deg] = 0.524[rad]                      #
    ###########################################################################
        pose_update_max_delay_us    = 50000;    # [us] if the interval from the 
                                                # last received pose_t is 
                                                # greater than this, consider 
                                                # that pose_t message as 
                                                # invalid
        max_safe_roll       = 0.349;    # [rad] maximum tolerable vehicle roll 
                                        # to be considered safe
        max_safe_pitch      = 0.785;    # [rad] maximum tolerable vehicle pitch 
                                        # to be considered safe

        v_body_x_tau    = 0; #0.08; # [s] filter time constant for longitudinal 
                                    # velocity
        a_body_x_tau    = 0; #0.08; # [s] filter time constant for longitudinal 
                                    # acceleration
        a_body_y_tau    = 0; #0.08; # [s] filter time constant for lateral 
                                    # acceleration
        # Note: Bandwidth = 1.9894 Hz for tau == 0.08
        max_engine_rpm  = 5000.0;   # [rpm] maximum allowable engine rpm
        max_steer_wheel_speed   = 0.02; # [rad/s] maximum rate of change of raw 
                                        # steering wheel data, below which, the 
                                        # steering wheel is considered 
                                        # stationary. This is used to determine 
                                        # whether the steer/shift plan has been 
                                        # executed to completion
    }
    scpp {
        min_pt_sep              = 0.08;     # [m] minimum allowable separation 
                                            # between points of the predicted 
                                            # trajectory path
        update_interval_ms      = 40;       # [ms] loop update interval
        final_brake_u_step      = 0.005;    # [.] if final u_speed is greater 
                                            # than the equivalent 
                                            # stopped_gas_brake_mv, reduce 
                                            # u_speed at this level at every 
                                            # iteration until 
                                            # stopped_gas_brake_mv is reached
        default_delay_us        = 1000000;  # [us] default delay interval
        shift_delay_us          = 1000000;  # [us] delay interval after shift
        execution_delay_us  = 200000;   # [us] delay interval after finish 
                                        # executing a plan
        safety_override_delay_us    = 10000000; # [us] delay interval after 
                                                # safety override has been 
                                                # triggered
        max_steer_interval_us   = 3300000;  # [us] interval to allow steer to 
                                            # complete when shifting
        motion_plan_timeout_us  = 300000;   # [us] motion plan timeout
        max_v_cmd_discontinuity = 2.0;      # [m/s] maximum discontinuity of 
                                            # v_cmd used
        vel_advisor_override_acc    = 1.0;  # [m/s^2] the acceleration to use 
                                            # when overriding the planned v_cmd 
                                            # based on the velocity advisor
        vel_advisor_override_dec    = 2.5;  # [m/s^2] the deceleration to use 
                                            # when overriding the planned v_cmd 
                                            # based on the velocity advisor
    }
    sclsc {
        l1_fw       = 4.1;      # [m] signed displacement from rear axle that 
                                # defines reference point
        Ke_fw       = 0.05;     # [rad/m] gain for cross-track error term
        Klambda_fw  = 0.0;      # [rad/rad] gain for heading error term
        Komega_fw   = 0.0;      # [rad/(rad/m)] gain for path curvature term
        l1_rv       = -1.1;     # [m] signed displacement from rear axle that 
                                # defines reference point
        Ke_rv       = 0.5;      # [rad/m] gain for cross-track error term
        Klambda_rv  = 0.0;      # [rad/rad] gain for heading error term
        Komega_rv   = 0.0;      # [rad/(rad/m)] gain for path curvature term
        min_pt_sep          = 0.08;     # [m] minimum allowable separation 
                                        # between points of the predicted 
                                        # trajectory path
        update_interval_ms  = 40;       # [ms] loop update interval
        final_brake_u_step  = 0.005;    # [.] if final u_speed is greater than 
                                        # the equivalent stopped_gas_brake_mv, 
                                        # reduce u_speed at this level at every 
                                        # iteration until stopped_gas_brake_mv 
                                        # is reached
        default_delay_us    = 1000000;  # [us] default delay interval
        shift_delay_us      = 1000000;  # [us] delay interval after shift
        execution_delay_us  = 200000;   # [us] delay interval after finish 
                                        # executing a plan
        safety_override_delay_us    = 300000000;    # [us] delay interval after 
                                                    # safety override has been 
                                                    # triggered
        motion_plan_timeout_us  = 300000;   # [us] motion plan timeout
        max_v_cmd_discontinuity = 1.0;      # [m/s] maximum discontinuity of 
                                            # v_cmd used
    }
    vehicle_constants {
        wheel_base  = 3.98;     # [m] wheelbase
        wheel_track = 1.93;     # [m] smallest wheel track (front) 
                                # [for rollover prevention]
        height_cg   = 1.41;     # [m] height of C.G. [for rollover prevention]
                                # Current value of 1.391 is just GUESSED to be 
                                # 0.5 m from roof.
        lat_accel_safety_factor = 1.0;  # [.] a multiplicative factor ~ 1.0 to 
                                        # tune conservativeness of rollover
        rear_axle_to_front_bumper   = 5.086;  # [m] = 3.574 to original bumpers
        rear_bumper_to_rear_axle    = 1.266;  # [m] = 1.027 to original bumper
        center_to_mirror_tip        = 1.3;    # [m] = 1.000 bare minimum
        max_steer       = 0.63;    # [rad] maximum steer angle of wheels
        max_steer_rate  = 0.35;    #0.32;   # [rad/s] at wheel on ground (450 swa rate)

        characteristic_velocity = 18.0;     # [.]
        time_const_brake        = 0.3;      # [s]
        time_const_gas          = 0.3;      # [s]
        time_const_steer        = 0.05;     # [s] Derived by Stefan
        delay_actuator_switch   = 0.00;     # [s]
        max_accel       = 1.8;      # [m/s^2]   cap
        max_decel       = 3.0;      # [m/s^2]
        
        # parameters for map from controls to ADU voltage
        mv_max  = 4700;     # [mV] upper limit of throttle command
        mv_pos  = 3200;     # [mV] start applying the gas (RPM starts 
                            # responding)
        u_pos   = 0.05;     # [dimensionless] normalized u corresponding to 
                            # mv_pos
        mv_neg  = 1850;     # [mV] start applying the brake (steady state speed 
                            # is slower than coasting)
        u_neg   = -0.05;    # [dimensionless] normalized u corresponding to 
                            # mv_neg
        mv_min  = 300;      # [mV] lower limit of brake command
        steer_center_volt   = 2305;     # [mV] steer center voltage measured in 
                                        # field
        steer_range_volt    = 4542;     # [mV] range of steer voltage == 
                                        # max_steer_volt - min_steer_volt

        # Parameters for the emprical LPV model for longitudinal motion
        # This model is used for velocity prediction in /planning3/vdh_model_prop.c                                
        lpv_model_a0  = 49.1208;	
        lpv_model_a1  = 0.5788;
        lpv_model_a2  = 0.1013;
        lpv_model_tau = 0.0;
        
        # mv to gas and brake mappings 
        # these mappings are used by the LPV model for longitudinal motion
        map_mv_to_gas_x1 = 3250.0;
        map_mv_to_gas_x2 = 3700.0;
        map_mv_to_gas_y1 = 0.0;
        map_mv_to_gas_y2 = 0.26;
        
        map_mv_to_brake_x1  = 1800.0;
        map_mv_to_brake_x2  = 900.0;
        map_mv_to_brake_y1  = 0.0;
        map_mv_to_brake_y2  = 0.6;
        
        # input scaling parameters of LPV model for longitudinal motion
        brake_coef  = 3.0;
        brake_const = 0.2;
    }
}

lane_tracker {
    # this parameter is a rough knob on the curvature the lane tracker uses
    # when interpolating the positions of low-confidence control points.
    #
    # acceptable values are from 0.0 (linear interpolation) to 1.0
    # (low-curvature cubic spline)
    interpolation_scale_factor = 0.0;

    # if set to 1, then the lane detectors will compute the position of the
    # sun and attempt to reject images with significant sun dazzle.
    reject_sun = 1;
}


# this block stores all situational interpreter/planner params
# TODO: separate the parameters for the SP from those for the SI
motion_planner {
    target_threshold_heading_deg = 180.0;    # [deg] +/- of this
    
    # Prediction related
    speed_design {
        min_v_cmd           = 0.1;  # [m/s] Minimum commanded speed to move forward
        max_v_cmd           = 6.67; # [m/s] 30mph = 13.41m/s, 20mph = 8.94m/s, 15mph = 6.67m/s, 10mph = 4.47m/s
        ramp_accel          = 1.0;  # [m/s^2]
        ramp_decel          = 2.5;  # 1.8;  # [m/s^2]
        slow_ramp_accel     = 0.5;  # [m/s^2] Slow ramp for initial acceleration
        slow_ramp_max_v_cmd = 1.0;  # [m/s] Slow ramp ends here
        min_duration        = 1.0;  # [s]
        #  decel  :   v0,     v1,      v2 
        # 1.8m/s^2: -0.3523, 1.2175, -0.0337
        # 2.0m/s^2: -0.4101, 1.2265, -0.0311
        # 2.5m/s^2: -0.5347, 1.2344, -0.0252 
        dist_overshoot_per_v0 = -0.3523;    # Overshooting distance is
        dist_overshoot_per_v1 =  1.2175;    # per_v0 + v * per_v1 + v^2 * per_v2
        dist_overshoot_per_v2 = -0.0337;
    }
    
    max_duration_gear_shift = 7.0;     # 5.0;     # Bound on how long the shifting takes    
    prop_heading_diff_tol_deg = 45;    # 20.0;  # heading diff between the car and the
                                       # motion plan at the stopped state
    prop_steering_diff_tol_deg = 90;   #120; #90 #40; #30.0; #steering diff between the car and the
                                       # motion plan at the stopped state
    speed_sampling_accel = 5.0;        # [m/s^2]
    max_side_accel             = 4.0;  # [m/s^2]  9.8m/s^ is 1g
    max_side_accel_loose       = 4.5;  # [m/s^2]  9.8m/s^ is 1g
    vlim_retry_ratio           = 0.7;  # 0.6;  # try with (vlim * ratio) on too much amax
 
    # Collision check related
    max_violation_dist = 3.0;           # [m] initial violation
    max_constraint_tighten = 0.0;       # tightening
    dist_reach_max_tighten = 2.0;       # where max is reached
    max_dist_obst_cost  = 40.0;         # 
    
    rrt {
        min_dist_ctrl_ipts = 0.5;       #1.0; # min dist allowed between ctrler inputs, m
        num_branch_pt = 4;
        branch_min_sep_L1 = 0.5;        # [m]
        branch_min_sep_dt = 0.2;        # [sec]
        # add branches once the following is not satisfied
        min_duration_to_root = 0.2;     # [sec]
        min_dist_to_root     = 1.0;     # [m]
        
        num_node_try_connect = 10;      # after sorting
        num_node_try_target  = 300;     # on change_target
        use_pruning          = 0;       # flag
        pruning_threshold_diff = 0.0;   # pruning
        
        # for trashing the tree -- to be removed
        exec_threshold_cross_track = 2.0;    # [m]
        exec_threshold_speed = 12.5;         # [m/s]
        exec_threshold_heading_deg = 90;  #45;     # [deg]
    }

    gridmap {
    	    convolve_radius = 0.9; #1.1; # half car width + 0.1 m
	   # obsmap_offsets =  [ -0.642, 3.642 ]; # centers of outermost 
           #                                      # convolution circles
	   # lanemap_offsets = [ 1.1, 1.785 ];  # centers of outermost 
           #                                     # convolution circles
            obsmap_offsets =  [ 0.0, 3.98 ]; # centers of outermost 
                                                 # convolution circles
	    lanemap_offsets = [ 1.6, 1.9 ];  # centers of outermost 
                                                 # convolution circles
    }

    lcgl_channels = "RRT-ESTOP,RRT-DESCENDENT,RRT-REPROPAGATE,RRT-TARGET"; 
    # add whichever you always want to see
    # RRT-CHECKGRID-POS,RRT-CHECKGRID1,RRT-CHECKGRID,RRT-CHECKGRID-DBG,
    # RRT-OUTSIDE,RRT-SEP_LINES,RRT-PREDICTION-DATA,RRT-BAD-PREDICTION,RRT-NOT_OK,RRT-MIN-STATE,
    # RRT-TARGET,RRT-EXPAND,RRT-TREE-CTRL,RRT-TREE,RRT-PLAN-DBG-PRED,RRT-PLAN-DBG-COMM,RRT-PLAN-DBG-TARGET
    # RRT-PLAN-DBG-ROOT,RRT:REACHING,RRT:SPEED,RRT:SPEED_CMD,RRT-HAZARD,RRT-DESCENDENT,RRT-REPROPAGATE
    # RRT-PRED,RRT-ESTOP"
}
high_bandwidth_multicast_address = "239.4.107.68";
high_bandwidth_multicast_port = 7698;

vehicle {
      ############################################
      # car physical characteristics

#     max_turn_rate_rad = 0.2041;  # turning radius is the reciprocal 
#     max_turn_rate_rad = 0.1871;   # tan(0.64) / 3.98
      max_turn_rate_rad = 0.1540;   # tan(0.55) / 3.98

      # maximum STEER radians is different, and can be computed
      # as max_steer_rate_rad = atan(max_turn_rate_rad * wheel_base)

      wheel_base = 3.98;         # front to back distance
      wheel_width = 1.93;        # distance between left and right wheels
      rear_axle_to_nose = 5.1;   # distance from rear axle to nose of car
      overall_width = 2.61;      # 2.0
      overall_length = 6.35;

      #############################################
      # EMC characteristics

      gas_none_mv = 3400;
      gas_full_mv = 3900;

      brake_none_mv = 1750;
      brake_full_mv = 1350;

      steer_left_mv = 272;
      steer_center_mv = 2305;
      steer_right_mv = 4542;

      steer_time = 2.5;        # how many seconds does it take to go from full left to full right

      gas_brake_time = 0.5;    # how many seconds to go from full gas to full brake?
}


#rndf = "rndf/uce_rndf_1.txt";
rndf = "rndf/nqe_rndf.txt";

#rndf = "rndf/nqe_testing/blockage_joshua1_RNDF.txt";
#rndf = "rndf/nqe_testing/intersection_siteA_joshua_RNDF.txt";
#rndf = "rndf/nqe_testing/kturn_joshua_RNDF.txt";
#rndf = "rndf/nqe_testing/blockage_joshua_RNDF.txt";
#rndf = "rndf/nqe_testing/intersection_joshua_RNDF.txt";

#rndf = "rndf/Dearborn_FitnessCenter_RNDF.txt";
